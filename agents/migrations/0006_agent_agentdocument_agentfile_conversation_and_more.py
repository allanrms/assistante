# Generated by Django 5.2.6 on 2025-10-24 02:47

import common.models
import django.db.models.deletion
import pgvector.django.vector
import simple_history.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('agents', '0005_enable_pgvector'),
        ('core', '0007_alter_contact_phone_number'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('display_name', models.CharField(default='Configuração LLM', help_text="Nome para identificar esta configuração (ex: 'OpenAI GPT-4 - Suporte')", max_length=100, verbose_name='Nome da Configuração')),
                ('name', models.CharField(choices=[('openai', 'OpenAI'), ('anthropic', 'Anthropic'), ('google', 'Google DeepMind'), ('mistral', 'Mistral AI'), ('cohere', 'Cohere'), ('meta', 'Meta (LLaMA)'), ('xai', 'xAI (Grok)'), ('other', 'Outro')], default='openai', max_length=50, verbose_name='Fornecedor LLM')),
                ('model', models.CharField(help_text='Ex: gpt-3.5-turbo, claude-3, mistral-7b, etc.', max_length=100, verbose_name='Modelo')),
                ('system_prompt', models.TextField(blank=True, help_text='Prompt inicial ou system message', null=True, verbose_name='Instruções do agente')),
                ('max_tokens', models.PositiveIntegerField(default=1024, verbose_name='Máximo de tokens')),
                ('temperature', models.FloatField(default=0.7, verbose_name='Temperatura')),
                ('top_p', models.FloatField(default=1.0, help_text='Amostragem nuclear (nucleus sampling)', verbose_name='Top-p')),
                ('presence_penalty', models.FloatField(default=0.0, verbose_name='Penalidade de presença')),
                ('frequency_penalty', models.FloatField(default=0.0, verbose_name='Penalidade de frequência')),
                ('has_calendar_tools', models.BooleanField(default=False, help_text='Habilita integração com Google Calendar', verbose_name='Ferramentas de Calendário')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agents', to='core.client')),
            ],
            options={
                'verbose_name': 'Configuração de LLM',
                'verbose_name_plural': 'Configurações de LLM',
                'ordering': ['-created_at'],
            },
            bases=(common.models.HistoryMixinSave, models.Model),
        ),
        migrations.CreateModel(
            name='AgentDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('embedding', pgvector.django.vector.VectorField(dimensions=1536)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='agents.agent')),
            ],
        ),
        migrations.CreateModel(
            name='AgentFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('name', models.CharField(help_text='Nome descritivo para identificar o arquivo', max_length=255, verbose_name='Nome do arquivo')),
                ('file', models.FileField(help_text='Arquivo a ser usado como contexto', upload_to='agent_files/', verbose_name='Arquivo')),
                ('file_type', models.CharField(choices=[('pdf', 'PDF'), ('txt', 'Texto'), ('docx', 'Word'), ('md', 'Markdown'), ('csv', 'CSV'), ('json', 'JSON'), ('html', 'HTML'), ('jpg', 'Imagem JPEG'), ('png', 'Imagem PNG'), ('gif', 'Imagem GIF'), ('webp', 'Imagem WEBP')], max_length=10, verbose_name='Tipo do arquivo')),
                ('extracted_content', models.TextField(blank=True, help_text='Texto extraído do arquivo para usar como contexto', null=True, verbose_name='Conteúdo extraído')),
                ('status', models.CharField(choices=[('uploading', 'Enviando'), ('processing', 'Processando'), ('ready', 'Pronto'), ('error', 'Erro')], default='uploading', max_length=20, verbose_name='Status')),
                ('error_message', models.TextField(blank=True, null=True, verbose_name='Mensagem de erro')),
                ('file_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='Tamanho do arquivo (bytes)')),
                ('is_active', models.BooleanField(default=True, help_text='Se desativado, o arquivo não será incluído no contexto', verbose_name='Ativo')),
                ('openai_file_id', models.CharField(blank=True, help_text='ID do arquivo na OpenAI Files API (para PDFs)', max_length=255, null=True, verbose_name='OpenAI File ID')),
                ('vectorized', models.BooleanField(default=False)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='agents.agent')),
            ],
            options={
                'verbose_name': 'Arquivo de Contexto',
                'verbose_name_plural': 'Arquivos de Contexto',
                'ordering': ['-created_at'],
            },
            bases=(common.models.HistoryMixinSave, models.Model),
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_number', models.CharField(max_length=50, verbose_name='Número de origem')),
                ('to_number', models.CharField(max_length=50, verbose_name='Número de destino')),
                ('status', models.CharField(choices=[('ai', 'Atendimento por IA'), ('human', 'Atendimento humano'), ('closed', 'Encerrada')], default='ai', max_length=20, verbose_name='Status da sessão')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('contact', models.ForeignKey(blank=True, help_text='Contato associado a esta sessão', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='conversations', to='core.contact', verbose_name='Contato')),
            ],
        ),
        migrations.CreateModel(
            name='ConversationSummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary', models.TextField()),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('conversation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='agents.conversation')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalAgent',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Atualizado em')),
                ('display_name', models.CharField(default='Configuração LLM', help_text="Nome para identificar esta configuração (ex: 'OpenAI GPT-4 - Suporte')", max_length=100, verbose_name='Nome da Configuração')),
                ('name', models.CharField(choices=[('openai', 'OpenAI'), ('anthropic', 'Anthropic'), ('google', 'Google DeepMind'), ('mistral', 'Mistral AI'), ('cohere', 'Cohere'), ('meta', 'Meta (LLaMA)'), ('xai', 'xAI (Grok)'), ('other', 'Outro')], default='openai', max_length=50, verbose_name='Fornecedor LLM')),
                ('model', models.CharField(help_text='Ex: gpt-3.5-turbo, claude-3, mistral-7b, etc.', max_length=100, verbose_name='Modelo')),
                ('system_prompt', models.TextField(blank=True, help_text='Prompt inicial ou system message', null=True, verbose_name='Instruções do agente')),
                ('max_tokens', models.PositiveIntegerField(default=1024, verbose_name='Máximo de tokens')),
                ('temperature', models.FloatField(default=0.7, verbose_name='Temperatura')),
                ('top_p', models.FloatField(default=1.0, help_text='Amostragem nuclear (nucleus sampling)', verbose_name='Top-p')),
                ('presence_penalty', models.FloatField(default=0.0, verbose_name='Penalidade de presença')),
                ('frequency_penalty', models.FloatField(default=0.0, verbose_name='Penalidade de frequência')),
                ('has_calendar_tools', models.BooleanField(default=False, help_text='Habilita integração com Google Calendar', verbose_name='Ferramentas de Calendário')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.client')),
            ],
            options={
                'verbose_name': 'historical Configuração de LLM',
                'verbose_name_plural': 'historical Configurações de LLM',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAgentFile',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Atualizado em')),
                ('name', models.CharField(help_text='Nome descritivo para identificar o arquivo', max_length=255, verbose_name='Nome do arquivo')),
                ('file', models.TextField(help_text='Arquivo a ser usado como contexto', max_length=100, verbose_name='Arquivo')),
                ('file_type', models.CharField(choices=[('pdf', 'PDF'), ('txt', 'Texto'), ('docx', 'Word'), ('md', 'Markdown'), ('csv', 'CSV'), ('json', 'JSON'), ('html', 'HTML'), ('jpg', 'Imagem JPEG'), ('png', 'Imagem PNG'), ('gif', 'Imagem GIF'), ('webp', 'Imagem WEBP')], max_length=10, verbose_name='Tipo do arquivo')),
                ('extracted_content', models.TextField(blank=True, help_text='Texto extraído do arquivo para usar como contexto', null=True, verbose_name='Conteúdo extraído')),
                ('status', models.CharField(choices=[('uploading', 'Enviando'), ('processing', 'Processando'), ('ready', 'Pronto'), ('error', 'Erro')], default='uploading', max_length=20, verbose_name='Status')),
                ('error_message', models.TextField(blank=True, null=True, verbose_name='Mensagem de erro')),
                ('file_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='Tamanho do arquivo (bytes)')),
                ('is_active', models.BooleanField(default=True, help_text='Se desativado, o arquivo não será incluído no contexto', verbose_name='Ativo')),
                ('openai_file_id', models.CharField(blank=True, help_text='ID do arquivo na OpenAI Files API (para PDFs)', max_length=255, null=True, verbose_name='OpenAI File ID')),
                ('vectorized', models.BooleanField(default=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('agent', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='agents.agent')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Arquivo de Contexto',
                'verbose_name_plural': 'historical Arquivos de Contexto',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='LongTermMemory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(default='note', max_length=64)),
                ('content', models.TextField()),
                ('embedding', pgvector.django.vector.VectorField(dimensions=1536)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('contact', models.ForeignKey(blank=True, help_text='Contato associado a esta memória de longo prazo', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='long_term_memories', to='core.contact', verbose_name='Contato')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('user', 'User'), ('assistant', 'Assistant')], max_length=16)),
                ('content', models.TextField()),
                ('response', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='agents.conversation')),
            ],
        ),
        migrations.RemoveField(
            model_name='assistantcontextfile',
            name='llm_config',
        ),
        migrations.DeleteModel(
            name='ChatHistory',
        ),
        migrations.RemoveField(
            model_name='historicalassistantcontextfile',
            name='history_user',
        ),
        migrations.RemoveField(
            model_name='historicalassistantcontextfile',
            name='llm_config',
        ),
        migrations.RemoveField(
            model_name='historicalllmproviderconfig',
            name='history_user',
        ),
        migrations.RemoveField(
            model_name='historicalllmproviderconfig',
            name='owner',
        ),
        migrations.RemoveField(
            model_name='llmproviderconfig',
            name='owner',
        ),
        migrations.DeleteModel(
            name='AssistantContextFile',
        ),
        migrations.DeleteModel(
            name='HistoricalAssistantContextFile',
        ),
        migrations.DeleteModel(
            name='HistoricalLLMProviderConfig',
        ),
    ]
