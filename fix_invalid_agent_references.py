#!/usr/bin/env python
"""
Script para corrigir refer√™ncias inv√°lidas de agent_id em EvolutionInstance.

Este script deve ser executado ANTES de rodar as migrations em produ√ß√£o
se voc√™ estiver encontrando o erro:

django.db.utils.IntegrityError: insert or update on table
"whatsapp_connector_evolutioninstance" violates foreign key constraint
"whatsapp_connector_e_llm_config_id_c6aa64e2_fk_agents_ag"

Uso:
    python fix_invalid_agent_references.py
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'assistante.settings')
django.setup()

from django.db import connection
from whatsapp_connector.models import EvolutionInstance
from agents.models import Agent


def fix_invalid_references():
    """
    Corrige refer√™ncias inv√°lidas de agent_id que n√£o existem na tabela agents_agent.
    """
    print("=" * 60)
    print("Script de Corre√ß√£o de Refer√™ncias Inv√°lidas")
    print("=" * 60)
    print()

    # Detectar banco de dados
    db_engine = connection.settings_dict['ENGINE']
    is_postgres = 'postgresql' in db_engine
    is_sqlite = 'sqlite' in db_engine

    print(f"üóÑÔ∏è  Banco de dados: {'PostgreSQL' if is_postgres else 'SQLite' if is_sqlite else 'Outro'}")
    print()

    # Pegar todos os IDs v√°lidos de agents
    valid_agent_ids = set(Agent.objects.values_list('id', flat=True))
    print(f"‚úÖ {len(valid_agent_ids)} agent(s) v√°lido(s) encontrado(s) no banco")
    print()

    # Buscar EvolutionInstances
    total_instances = EvolutionInstance.objects.count()
    print(f"üìä Total de EvolutionInstances: {total_instances}")

    # Buscar inst√¢ncias com agent_id n√£o-nulo
    instances_with_agent = EvolutionInstance.objects.exclude(agent_id__isnull=True)
    print(f"üìä Inst√¢ncias com agent configurado: {instances_with_agent.count()}")

    # Buscar EvolutionInstances com agent_id inv√°lido
    invalid_instances = EvolutionInstance.objects.exclude(
        agent_id__in=valid_agent_ids
    ).exclude(agent_id__isnull=True)

    count = invalid_instances.count()
    print()

    if count > 0:
        print(f"‚ö†Ô∏è  ENCONTRADAS {count} INST√ÇNCIA(S) COM AGENT_ID INV√ÅLIDO:")
        print()

        for instance in invalid_instances:
            print(f"   - ID: {instance.id}")
            print(f"     Nome: {instance.name}")
            print(f"     Agent ID inv√°lido: {instance.agent_id}")
            print()

        # Perguntar confirma√ß√£o
        response = input("Deseja corrigir essas inst√¢ncias definindo agent_id como NULL? (s/n): ")

        if response.lower() in ['s', 'sim', 'y', 'yes']:
            # Executar corre√ß√£o usando ORM do Django (mais port√°vel)
            affected = invalid_instances.update(agent=None)
            print()
            print(f"‚úÖ {affected} inst√¢ncia(s) corrigida(s) com sucesso!")
            print()
            return True
        else:
            print()
            print("‚ùå Opera√ß√£o cancelada pelo usu√°rio")
            print()
            return False
    else:
        print("‚úÖ NENHUMA REFER√äNCIA INV√ÅLIDA ENCONTRADA!")
        print("   Seu banco de dados est√° OK para executar as migrations")
        print()
        return True


if __name__ == '__main__':
    try:
        success = fix_invalid_references()

        if success:
            print("=" * 60)
            print("PR√ìXIMO PASSO:")
            print("Agora voc√™ pode executar as migrations com seguran√ßa:")
            print("    python manage.py migrate")
            print("=" * 60)
            sys.exit(0)
        else:
            sys.exit(1)

    except Exception as e:
        print()
        print("‚ùå ERRO DURANTE A EXECU√á√ÉO:")
        print(f"   {str(e)}")
        print()
        import traceback
        traceback.print_exc()
        sys.exit(1)
