"""
Ferramentas do Google Calendar para integra√ß√£o com LangChain
"""
import re
import traceback
from datetime import datetime, timedelta, time
from zoneinfo import ZoneInfo

from langchain.agents import Tool
from .services import GoogleCalendarService


class GoogleCalendarLangChainTools:
    """Classe que cria ferramentas do Google Calendar para LangChain"""

    def __init__(self, numero_whatsapp: str):
        """
        Inicializa as ferramentas com o n√∫mero do WhatsApp

        Args:
            numero_whatsapp: N√∫mero do WhatsApp do usu√°rio
        """
        self.numero_whatsapp = numero_whatsapp

    def get_tools(self):
        """
        Retorna lista de ferramentas LangChain para Google Calendar

        Returns:
            List[Tool]: Lista de ferramentas LangChain
        """
        return [
            # Tool(
            #     name="conectar_google_calendar",
            #     func=self._conectar_google_calendar,
            #     description="Conecta o Google Calendar do usu√°rio via OAuth2. Use quando o usu√°rio n√£o estiver conectado."
            # ),
            Tool(
                name="listar_eventos_calendar",
                func=self._listar_eventos_calendar,
                description="Retorna todos os eventos j√° agendados com suas datas e hor√°rios ocupados"
            ),
            Tool(
                name="criar_evento_calendar",
                func=self._criar_evento_calendar,
                description="""Cria um novo evento no Google Calendar.
                Formato: titulo|data_inicio|hora_inicio|data_fim|hora_fim|descricao|localizacao
                Exemplo: Consulta m√©dica|25/12/2024|14:30||15:30|Consulta de rotina|Cl√≠nica ABC
                Campos opcionais: data_fim, hora_fim, descricao, localizacao"""
            ),
            Tool(
                name="verificar_disponibilidade",
                func=self._verificar_disponibilidade,
                description="""OBRIGAT√ìRIO para verificar disponibilidade de hor√°rios em um dia.
                Retorna TODOS os slots de 30 em 30 minutos (09h-12h e 13h-17h) com status ‚úÖ Dispon√≠vel ou ‚ùå Ocupado.
                Use SEMPRE que precisar sugerir hor√°rios para o paciente.
                Formato: data
                Exemplo: 30/09/2025"""
            ),
            Tool(
                name="deletar_evento_por_telefone",
                func=self._deletar_evento_por_telefone,
                description="""Deleta evento baseado no n√∫mero do WhatsApp no t√≠tulo.
                Formato: tipo_consulta (opcional)
                Exemplo: PRIMEIRA-CONSULTA"""
            ),
        ]


    def _listar_eventos_calendar(self, input_str: str = "") -> str:
        """Lista os pr√≥ximos eventos com horarios j√° ocupados do Google Calendar do usu√°rio"""
        try:
            # Parse max_resultados do input se fornecido
            max_resultados = 10
            if input_str and input_str.strip().isdigit():
                max_resultados = int(input_str.strip())

            calendar_service = GoogleCalendarService()
            success, events = calendar_service.list_events(self.numero_whatsapp, max_results=max_resultados)

            if not success:
                return f"‚ùå Erro ao acessar o calend√°rio: {events}"

            if not events:
                return "üìÖ Voc√™ n√£o tem eventos pr√≥ximos na sua agenda."

            eventos_formatados = ["üìÖ *Seus Pr√≥ximos Eventos:*\n"]

            for i, event in enumerate(events, 1):
                start = event['start'].get('dateTime', event['start'].get('date'))
                title = event.get('summary', 'Evento sem t√≠tulo')
                location = event.get('location', '')
                description = event.get('description', '')

                # Formatar data/hora
                if 'T' in start:  # √â datetime
                    dt = datetime.fromisoformat(start.replace('Z', '+00:00'))
                    formatted_time = dt.strftime('%d/%m/%Y √†s %H:%M')
                else:  # √â s√≥ data
                    dt = datetime.fromisoformat(start)
                    formatted_time = dt.strftime('%d/%m/%Y (dia todo)')

                evento_info = f"{i}. *{title}*\n   üìÖ {formatted_time}"

                if location:
                    evento_info += f"\n   üìç {location}"

                if description and len(description) < 100:
                    evento_info += f"\n   üìù {description}"

                eventos_formatados.append(evento_info)

            return "\n\n".join(eventos_formatados)

        except Exception as e:
            return f"‚ùå Erro interno ao listar eventos: {str(e)}"

    def _criar_evento_calendar(self, input_str: str) -> str:
        """Cria um novo evento no Google Calendar do usu√°rio"""
        try:
            # Parse do input: titulo|data_inicio|hora_inicio|data_fim|hora_fim|descricao|localizacao
            if not input_str or input_str.strip() == "":
                return "‚ùå Par√¢metros necess√°rios. Use: titulo|data_inicio|hora_inicio|data_fim|hora_fim|descricao|localizacao"

            parts = input_str.split('|')
            if len(parts) < 2:
                return "‚ùå Formato incorreto. Use: titulo|data_inicio|hora_inicio|data_fim|hora_fim|descricao|localizacao"

            # üß† CORRE√á√ÉO: definir o t√≠tulo original ANTES de aplicar o formato
            titulo_original = parts[0].strip()
            data_inicio = parts[1].strip()
            hora_inicio = parts[2].strip() if len(parts) > 2 else ""
            data_fim = parts[3].strip() if len(parts) > 3 else ""
            hora_fim = parts[4].strip() if len(parts) > 4 else ""
            descricao = parts[5].strip() if len(parts) > 5 else ""
            localizacao = parts[6].strip() if len(parts) > 6 else ""

            # ‚úÖ For√ßar o formato de t√≠tulo correto
            if "‚Äî" not in titulo_original and "+55" not in titulo_original:
                tipo_evento = titulo_original.upper() if titulo_original else "CONSULTA"
                titulo = f"[{tipo_evento}] +55{self.numero_whatsapp} ‚Äî Nome do Paciente"
            else:
                titulo = titulo_original

            # Processa as datas
            try:
                data_inicio_obj = datetime.strptime(data_inicio, '%d/%m/%Y')
            except ValueError:
                return "‚ùå Formato de data inv√°lido. Use DD/MM/YYYY (ex: 25/12/2024)"

            # Define data de fim se n√£o fornecida
            if not data_fim:
                data_fim_obj = data_inicio_obj
            else:
                try:
                    data_fim_obj = datetime.strptime(data_fim, '%d/%m/%Y')
                except ValueError:
                    return "‚ùå Formato de data de fim inv√°lido. Use DD/MM/YYYY"

            # Prepara os dados do evento
            event_data = {
                'summary': titulo,
                'description': f"Evento criado via WhatsApp\n\n{descricao}" if descricao else "Evento criado via WhatsApp"
            }

            if localizacao:
                event_data['location'] = localizacao

            # Define hor√°rio
            if hora_inicio:
                try:
                    hora_inicio_obj = datetime.strptime(hora_inicio, '%H:%M').time()
                    start_datetime = datetime.combine(data_inicio_obj.date(), hora_inicio_obj)

                    # Define hora de fim - sempre 29 minutos a mais que hora_inicio
                    end_datetime = start_datetime + timedelta(minutes=29)

                    event_data['start'] = {
                        'dateTime': start_datetime.isoformat(),
                        'timeZone': 'America/Sao_Paulo',
                    }
                    event_data['end'] = {
                        'dateTime': end_datetime.isoformat(),
                        'timeZone': 'America/Sao_Paulo',
                    }

                except ValueError:
                    return "‚ùå Formato de hora inv√°lido. Use HH:MM (ex: 14:30)"
            else:
                # Evento de dia inteiro
                event_data['start'] = {
                    'date': data_inicio_obj.strftime('%Y-%m-%d'),
                }
                # Para eventos de dia inteiro, a data de fim deve ser o dia seguinte
                event_data['end'] = {
                    'date': (data_fim_obj + timedelta(days=1)).strftime('%Y-%m-%d'),
                }

            # Verifica disponibilidade antes de criar
            if hora_inicio:
                # Verificar se h√° conflito com eventos existentes
                calendar_service = GoogleCalendarService()
                success, events = calendar_service.list_events(self.numero_whatsapp, max_results=50)

                if success:
                    # Converter hor√°rio de in√≠cio para datetime
                    hora_inicio_dt = datetime.strptime(hora_inicio, '%H:%M').time()
                    hora_fim_dt = (datetime.combine(data_inicio_obj.date(), hora_inicio_dt) + timedelta(minutes=29)).time()

                    # Verificar conflitos com eventos existentes
                    for event in events:
                        start = event['start'].get('dateTime', event['start'].get('date'))

                        if 'T' in start:  # √â datetime
                            event_dt = datetime.fromisoformat(start.replace('Z', '+00:00'))
                            if event_dt.tzinfo:
                                event_dt = event_dt.astimezone().replace(tzinfo=None)

                            # Se √© o mesmo dia
                            if event_dt.date() == data_inicio_obj.date():
                                event_time = event_dt.time()

                                # Verificar sobreposi√ß√£o de hor√°rios
                                # Um evento conflita se come√ßa antes do fim do novo evento E termina depois do in√≠cio
                                if hora_inicio_dt <= event_time < hora_fim_dt:
                                    return f"""‚ùå *Conflito de hor√°rio!*

O hor√°rio {hora_inicio} j√° est√° ocupado com: *{event.get('summary', 'Evento sem t√≠tulo')}*

Por favor, escolha outro hor√°rio dispon√≠vel."""

            # Cria o evento
            calendar_service = GoogleCalendarService()
            success, result = calendar_service.create_event(self.numero_whatsapp, event_data)

            if success:
                # Formata informa√ß√µes do evento criado
                data_formatada = data_inicio_obj.strftime('%d/%m/%Y')

                resposta = f"""‚úÖ *Evento criado com sucesso!*

üìã *T√≠tulo:* {titulo}
üìÖ *Data:* {data_formatada}"""

                if hora_inicio:
                    # Calcular hora fim sempre como +29 minutos
                    hora_fim_calc = (datetime.strptime(hora_inicio, '%H:%M') + timedelta(minutes=29)).strftime('%H:%M')
                    resposta += f"\n‚è∞ *Hor√°rio:* {hora_inicio} √†s {hora_fim_calc}"
                else:
                    resposta += f"\n‚è∞ *Tipo:* Dia inteiro"

                if localizacao:
                    resposta += f"\nüìç *Local:* {localizacao}"

                if descricao:
                    resposta += f"\nüìù *Descri√ß√£o:* {descricao}"

                # Extrai link se dispon√≠vel
                if ': ' in result:
                    link = result.split(': ')[-1]
                    resposta += f"\n\nüîó *Ver no Google Calendar:* {link}"

                return resposta
            else:
                return f"‚ùå Erro ao criar evento: {result}"

        except Exception as e:
            return f"‚ùå Erro interno ao criar evento: {str(e)}"


    def interpretar_data_relativa(self, texto: str) -> str:
            """
            Converte express√µes como 'sexta', 'amanh√£', 'ter√ßa-feira' em uma data real (DD/MM/YYYY)
            baseada na data atual do sistema.
            """
            hoje = datetime.now().date()
            texto = texto.lower()

            # Mapeamento dos dias da semana
            dias_semana = {
                "segunda": 0, "segunda-feira": 0,
                "ter√ßa": 1, "ter√ßa-feira": 1, "terca": 1, "terca-feira": 1,
                "quarta": 2, "quarta-feira": 2,
                "quinta": 3, "quinta-feira": 3,
                "sexta": 4, "sexta-feira": 4,
                "s√°bado": 5, "sabado": 5, "s√°bado-feira": 5,
                "domingo": 6
            }

            # Casos especiais
            if "hoje" in texto:
                return hoje.strftime("%d/%m/%Y")

            if "amanh√£" in texto or "amanha" in texto:
                return (hoje + timedelta(days=1)).strftime("%d/%m/%Y")

            if "depois de amanh√£" in texto or "depois de amanha" in texto:
                return (hoje + timedelta(days=2)).strftime("%d/%m/%Y")

            # Verificar se mencionou um dia da semana
            for nome_dia, indice in dias_semana.items():
                if re.search(rf"\b{nome_dia}\b", texto):
                    hoje_idx = hoje.weekday()
                    dias_a_frente = (indice - hoje_idx + 7) % 7
                    if dias_a_frente == 0:
                        dias_a_frente = 7  # pr√≥xima ocorr√™ncia
                    data_resultado = hoje + timedelta(days=dias_a_frente)
                    return data_resultado.strftime("%d/%m/%Y")

            # Se n√£o encontrou nenhuma palavra reconhecida, retorna vazio
            return ""


    def _verificar_disponibilidade(self, input_str: str) -> str:
        """Verifica os hor√°rios (30 em 30 min) entre 09h-12h e 13h-17h"""


        def parse_datetime(dt_str: str) -> datetime:
            """Converte string ISO 8601 para datetime naive (sem timezone, sempre hor√°rio local)"""
            dt = datetime.fromisoformat(dt_str.replace('Z', '+00:00'))
            if dt.tzinfo:
                dt = dt.astimezone(ZoneInfo("America/Sao_Paulo"))
                dt = dt.replace(tzinfo=None)
            return dt

        try:
            if not input_str or input_str.strip() == "":
                return "‚ùå Par√¢metros necess√°rios. Use: data"

            # üÜï NOVO: tentar converter "sexta" ou "ter√ßa" em uma data real
            data_interpretada = self.interpretar_data_relativa(input_str)
            if data_interpretada:
                data = data_interpretada
            else:
                # Caso contr√°rio, manter formato manual "DD/MM/YYYY"
                parts = input_str.split('|')
                data = parts[0].strip()

            # Continua o c√≥digo original normalmente...
            calendar_service = GoogleCalendarService()
            success, events = calendar_service.list_events(self.numero_whatsapp, max_results=50)

            if not success:
                return f"‚ùå Erro ao verificar disponibilidade: {events}"

            # Converte a data fornecida
            try:
                data_obj = datetime.strptime(data, '%d/%m/%Y')
            except ValueError:
                return "‚ùå Formato de data inv√°lido. Use DD/MM/YYYY"

            blocos = [
                (datetime.combine(data_obj.date(), time(9, 0)), datetime.combine(data_obj.date(), time(12, 0))),
                (datetime.combine(data_obj.date(), time(13, 0)), datetime.combine(data_obj.date(), time(17, 0)))
            ]

            eventos_do_dia = []
            for event in events:
                start = event['start'].get('dateTime', event['start'].get('date'))
                end = event['end'].get('dateTime', event['end'].get('date'))

                start_dt = parse_datetime(start)
                end_dt = parse_datetime(end)
                if end_dt <= start_dt:
                    end_dt = start_dt + timedelta(minutes=1)

                if start_dt.date() == data_obj.date():
                    eventos_do_dia.append((start_dt, end_dt, event.get('summary', 'Evento sem t√≠tulo')))

            eventos_do_dia.sort(key=lambda x: x[0])

            resposta = f"üìÖ *Disponibilidade em {data_obj.strftime('%d/%m/%Y')} (09h-12h / 13h-17h):*\n\n"

            horarios = []
            for bloco_inicio, bloco_fim in blocos:
                atual = bloco_inicio
                while atual < bloco_fim:
                    fim_slot = atual + timedelta(minutes=30)
                    if fim_slot <= bloco_fim:
                        horarios.append((atual, fim_slot))
                    atual = fim_slot

            for ini, fim in horarios:
                ocupado = False
                evento_nome = None
                for ev_ini, ev_fim, titulo in eventos_do_dia:
                    if ini < ev_fim and fim > ev_ini:
                        ocupado = True
                        evento_nome = titulo
                        break
                if ocupado:
                    resposta += f"‚ùå {ini.strftime('%H:%M')} - {fim.strftime('%H:%M')} (Ocupado: {evento_nome})\n"
                else:
                    resposta += f"‚úÖ {ini.strftime('%H:%M')} - {fim.strftime('%H:%M')} (Dispon√≠vel)\n"

            if eventos_do_dia:
                resposta += "\nüìã *Eventos do dia:*\n"
                for i, (ini, fim, titulo) in enumerate(eventos_do_dia, 1):
                    resposta += f"{i}. {titulo} ({ini.strftime('%H:%M')} - {fim.strftime('%H:%M')})\n"

            print(f'resposta {resposta}')
            return resposta

        except Exception as e:
            return f"‚ùå Erro interno ao verificar disponibilidade: {str(e)}"

    def _verificar_disponibilidade_detalhada(self, numero_whatsapp: str, data: str, hora_inicio: str = "", hora_fim: str = "") -> str:
        """Verifica disponibilidade com logs detalhados para debug"""
        try:
            # Lista eventos
            calendar_service = GoogleCalendarService()
            success, events = calendar_service.list_events(numero_whatsapp, max_results=50)

            if not success:
                return f"‚ùå Erro ao acessar Google Calendar: {events}"

            # Converte a data fornecida
            try:
                data_obj = datetime.strptime(data, '%d/%m/%Y')
            except ValueError:
                return "‚ùå Formato de data inv√°lido. Use DD/MM/YYYY"

            # Filtra eventos do dia
            eventos_do_dia = []
            for event in events:
                start = event['start'].get('dateTime', event['start'].get('date'))

                if 'T' in start:  # √â datetime
                    event_date = datetime.fromisoformat(start.replace('Z', '+00:00')).date()
                else:  # √â s√≥ data
                    event_date = datetime.fromisoformat(start).date()

                if event_date == data_obj.date():
                    eventos_do_dia.append(event)

            resposta = f"üìÖ *Disponibilidade DEBUG para {data_obj.strftime('%d/%m/%Y')}:*\n\n"
            resposta += f"üîç Total eventos verificados: {len(events)}\n"
            resposta += f"üìã Eventos no dia {data}: {len(eventos_do_dia)}\n\n"

            if not eventos_do_dia:
                resposta += "‚úÖ DIA COMPLETAMENTE LIVRE!\n"
                if hora_inicio:
                    # Calcular hora_fim como +29 minutos
                    hora_fim_calc = (datetime.strptime(hora_inicio, '%H:%M') + timedelta(minutes=29)).strftime('%H:%M')
                    resposta += f"‚úÖ Hor√°rio {hora_inicio}-{hora_fim_calc} DISPON√çVEL!"
            else:
                resposta += f"üìã *Eventos encontrados no dia {data}:*\n\n"
                for i, event in enumerate(eventos_do_dia, 1):
                    start = event['start'].get('dateTime', event['start'].get('date'))
                    title = event.get('summary', 'Evento sem t√≠tulo')

                    if 'T' in start:  # √â datetime
                        dt = datetime.fromisoformat(start.replace('Z', '+00:00'))
                        time_str = dt.strftime('%H:%M')
                        resposta += f"{i}. *{title}* √†s {time_str}\n"
                    else:
                        resposta += f"{i}. *{title}* (dia inteiro)\n"

                # Verificar conflito espec√≠fico se hor√°rio solicitado
                if hora_inicio:
                    # Sempre calcular hora_fim como +29 minutos
                    hora_fim_calc = (datetime.strptime(hora_inicio, '%H:%M') + timedelta(minutes=29)).strftime('%H:%M')
                    resposta += f"\nüîç *Verificando conflito para {hora_inicio}-{hora_fim_calc}:*\n"
                    conflito = False

                    for event in eventos_do_dia:
                        start = event['start'].get('dateTime', event['start'].get('date'))
                        if 'T' in start:
                            dt = datetime.fromisoformat(start.replace('Z', '+00:00'))
                            event_time = dt.time()

                            hora_inicio_obj = datetime.strptime(hora_inicio, '%H:%M').time()
                            hora_fim_obj = (datetime.strptime(hora_inicio, '%H:%M') + timedelta(minutes=29)).time()

                            # Verifica√ß√£o de conflito mais precisa
                            if hora_inicio_obj <= event_time < hora_fim_obj:
                                conflito = True
                                resposta += f"‚ö†Ô∏è CONFLITO: {event.get('summary')} √†s {event_time}\n"

                    if not conflito:
                        resposta += f"‚úÖ Hor√°rio {hora_inicio}-{hora_fim_calc} DISPON√çVEL!"

            return resposta

        except Exception as e:
            return f"‚ùå Erro interno ao verificar disponibilidade: {str(e)}"


    def _deletar_evento_por_telefone(self, input_str: str = "PRIMEIRA-CONSULTA") -> str:
        """Deleta evento baseado no n√∫mero do WhatsApp que est√° no t√≠tulo"""
        try:
            # Parse do input para tipo de consulta
            tipo_consulta = input_str.strip() if input_str.strip() else "PRIMEIRA-CONSULTA"

            calendar_service = GoogleCalendarService()
            success, events = calendar_service.list_events(self.numero_whatsapp, max_results=50)

            if not success:
                return f"‚ùå Erro ao buscar eventos: {events}"

            candidato = None
            eventos_encontrados = []

            # Procurar eventos que contenham o n√∫mero do WhatsApp no t√≠tulo
            for event in events:
                event_title = event.get("summary", "")

                # Verificar se o n√∫mero est√° no t√≠tulo (com ou sem +55)
                if (self.numero_whatsapp in event_title or
                    f"+55{self.numero_whatsapp}" in event_title or
                    f"55{self.numero_whatsapp}" in event_title):

                    eventos_encontrados.append(event)

                    # Se tamb√©m cont√©m o tipo de consulta, √© candidato priorit√°rio
                    if tipo_consulta in event_title:
                        candidato = event
                        break

            # Se n√£o encontrou candidato espec√≠fico, usar o primeiro encontrado
            if not candidato and eventos_encontrados:
                candidato = eventos_encontrados[0]

            if not candidato:
                return f"üòï N√£o encontrei nenhum evento agendado para o n√∫mero {self.numero_whatsapp}."

            # Deletar o evento encontrado
            service = calendar_service.get_calendar_service(self.numero_whatsapp)
            service.events().delete(calendarId="primary", eventId=candidato["id"]).execute()

            # Extrair informa√ß√µes do evento deletado
            start = candidato["start"].get("dateTime", candidato["start"].get("date"))
            if 'T' in start:
                dt = datetime.fromisoformat(start.replace('Z', '+00:00'))
                data_formatada = dt.strftime('%d/%m/%Y')
                hora_formatada = dt.strftime('%H:%M')
                info_tempo = f"no dia {data_formatada} √†s {hora_formatada}"
            else:
                dt = datetime.fromisoformat(start)
                data_formatada = dt.strftime('%d/%m/%Y')
                info_tempo = f"no dia {data_formatada} (dia inteiro)"

            return f"‚úÖ Evento *{candidato.get('summary', 'Sem t√≠tulo')}* foi cancelado com sucesso {info_tempo}!"

        except Exception as e:
            return f"‚ùå Erro ao deletar evento: {str(e)}"


