"""
Django settings for vision8 project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

env = environ.Env(DEBUG=(bool, False))
# Primeiro tenta carregar o .env de produ√ß√£o, depois o de desenvolvimento
dev_env = os.path.join(BASE_DIR, 'assistante/.env')
env.read_env(dev_env)

OPENAI_API_KEY = env('OPENAI_API_KEY')
GOOGLE_API_KEY = env('GOOGLE_API_KEY')
DEEPGRAM_API_KEY = env('DEEPGRAM_API_KEY')

EVOLUTION_API_BASE_URL = env('EVOLUTION_API_BASE_URL')
EVOLUTION_API_TOKEN = env('EVOLUTION_API_TOKEN')
BACKEND_BASE_URL = env('BACKEND_BASE_URL')
SITE_URL = env('BACKEND_BASE_URL')
# EVOLUTION_API_INSTANCE = env('EVOLUTION_API_INSTANCE')

N8N_WEBHOOK_URL = env('N8N_WEBHOOK_URL')

# Google Calendar OAuth2 settings
GOOGLE_OAUTH2_CLIENT_ID = env('GOOGLE_OAUTH2_CLIENT_ID')
GOOGLE_OAUTH2_CLIENT_SECRET = env('GOOGLE_OAUTH2_CLIENT_SECRET')
GOOGLE_OAUTH2_REDIRECT_URI = env('GOOGLE_OAUTH2_REDIRECT_URI')


DEBUG = env('DEBUG')

# Force debug mode even in production
INTERNAL_IPS = ['*']


SECRET_KEY = 'django-insecure-++6dk@!r-re6r#s)nyqd43a$7c#2m@za4ma-_k9@mt*!@daoqp'

ALLOWED_HOSTS = ['*']
# SECURITY WARNING: keep the secret key used in production secret!
APPEND_SLASH = False


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'rest_framework',
    # 'django_ai_assistant',
    'core',
    'agents',
    'client_painel',
    'whatsapp_connector',
    'drf_spectacular',
    'authentication',
    'google_calendar',
    'dialog_test',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'core.middleware.ClientSwitcherMiddleware',
    'client_painel.middleware.UserLanguageMiddleware',
    'authentication.middleware.RoleBasedRedirectMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'assistante.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
            ],
        },
    },
]

WSGI_APPLICATION = 'assistante.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': Path(__file__).resolve().parent.parent / 'db.sqlite3',  # ou 'db.sqlite3' se BASE_DIR n√£o for um Path object
    }
}


CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.dummy.DummyCache",
    }
}
# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGES = (
    ('pt', 'Portugu√™s'),
    ('en', 'English'),
)

LANGUAGE_CODE = 'pt-br'
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

# TIME_ZONE = 'UTC'
TIME_ZONE = 'America/Sao_Paulo'
USE_I18N = True

USE_L10N = False

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static_dev'),
# ]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model
AUTH_USER_MODEL = 'authentication.User'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}


# AI settings (OpenAI or similar)  
AI_MODEL = 'gpt-4o'

# WhatsApp settings
ALLOWED_PHONE_NUMBERS = os.environ.get('ALLOWED_PHONE_NUMBERS', '').split(',')

# Login/Logout URLs
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/login/'

# Email configuration para envio de erros
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

# Configura√ß√£o dos ADMINS para receber emails de erro
ADMINS = [
    ('Allan', 'allan.charlys@gmail.com'),
]

# Configura√ß√£o do SERVER_EMAIL
SERVER_EMAIL = EMAIL_HOST_USER

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'error_email': {
            'format': 'üö® ERRO CR√çTICO ASSISTANTE\n\nTempo: {asctime}\nM√≥dulo: {module}\nLevel: {levelname}\n\nMensagem:\n{message}\n\nTraceback:\n',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': '/tmp/assistante_django.log',
            'formatter': 'verbose',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'error_email',
            'include_html': False,
        },
        'critical_file': {
            'class': 'logging.FileHandler',
            'filename': '/tmp/assistante_critical_errors.log',
            'formatter': 'verbose',
            'level': 'ERROR',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console', 'file', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        # Logger customizado para erros do LangChain Agent
        'assistante.langchain_agent': {
            'handlers': ['console', 'file', 'mail_admins', 'critical_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        # Logger para erros de processamento de m√≠dia
        'assistante.media_processing': {
            'handlers': ['console', 'file', 'mail_admins', 'critical_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        # Logger para erros cr√≠ticos do webhook
        'assistante.webhook': {
            'handlers': ['console', 'file', 'mail_admins', 'critical_file'],
            'level': 'ERROR',
            'propagate': False,
        },
    },
}


